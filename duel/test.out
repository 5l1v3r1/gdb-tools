GNU gdb (Gentoo 7.12.1 vanilla) 7.12.1
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-pc-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://bugs.gentoo.org/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word".
Duel - Debugging U (might) Even Like -- A high level data exploration language

Duel was designed to overcome problems with traditional debuggers' print
statement. It supports the C operators, many C constructs, and many new
operators for easy exploration of the program's space, e.g.
x[..100] >? 0                 show positive x[i] for i=0 to 99
y[10..20].code !=? 0          show non-zero y[i].code for i=10 to 20
h-->next->code                expand linked list h->next, h->next->next ...
head-->next.if(code>0) name   show name for each element with code>0
x[i:=..100]=y[i];             array copy. i is an alias to vals 0..99
head-->next[[10..15]]         the 10th to 15th element of a linked list
#/(head-->next->val==?4)      count elements with val==4
head-->next->if(next) val >? next->val    check if list is sorted by val

Duel was created by Michael Golan at Princeton University.
Duel.py is a pure-python Duel implementation by Sergei Golubchik.

Try "dl operators" or "dl longhelp"
1 = 1
2.0 = 2
2e1 = 20
1 = 1
2.0 = 2
2e1 = 20
2.0e1 = 20
020 = 16
0x20 = 32
Expected 'if' or ident or '&&/' or '||/' or '#/' or '-' or '*' or '&' or '!' or '~' or '(cast)' or real or hexadecimal or decimal or octal or char or string or underscores or ident or '(' or '{' or '..' at position (1, 1) => '*019'.
foo = 1
bar = 2
s = 0x400544 "s1"
'a' = 97 'a'
'\r' = 13 '\r'
'\x20' = 32 ' '
"foo\7bar" = "foo\abar"
"\a\r\n\v\t"[2] = 10 '\n'
"\a\r\n\v\t"[3] = 11 '\v'
"reverse"[6] = 101 'e'
"reverse"[5] = 115 's'
"reverse"[4] = 114 'r'
"reverse"[3] = 101 'e'
"reverse"[2] = 118 'v'
No symbol "unknown_var" in current context.
(2.0) = 2
2 = 2
2 = 2
(foo) = 1
1 = 1
Cannot subscript requested type.
s[1] = 49 '1'
arr[1] = 10
arr[foo] = 10
arr[1] = 10
st.i = 123
st.(r) = 3.1415000000000002
st.3.1415000000000002 = 3.1415000000000002
tree->v = 14
No symbol "u" in current context.
No symbol "val" in current context.
tree->left->v = 12
tree->v = 14
tree->left->v = 12
tree-->left[[2]]->v = 8
tree-->left[[3]]->v = 0
tree-->left->v[[1]] = 12
tree-->left->v[[2]] = 8
(*tree).v = 14
Attempt to take contents of a non-pointer value.
Attempt to take contents of a non-pointer value.
*&foo = 1
#/foo = 1
#/(foo) = 1
#/tree-->left = 4
#/arr[..2] = 2
#/(arr[..2] <? 7) = 1
&&/foo = 1
&&/tree-->left->v = 0
||/arr[..2] = 1
&&/arr[0..] = 0
-5 = -5
--10 = 10
-foo = -1
!0 = 1
!foo = 0
!1 = 0
foo + 1 = 2
~5 = -6
~0xFF77 = -65400
10 * 3.14 = 31.400000000000002
arr[foo] / 3.1415000000000002 = 3.1831927423205473
st.i % 10 = 3
1 + 2 = 3
100 - 9 * 8 = 28
1 << 8 / 2 = 16
1024 >> 2 * 3 = 16
foo ^ 0x0BEC = 3053
1234 | 0xBABE = 48894
0xDEAD & 0xBEEF = 40621
0xDEAD && 0xBEEF = 1
foo && 0 = 0
foo || 0 = 1
tree->left->left->left->v || 0 = 0
tree->v = 14
tree->right->v = 13
tree = 0x601240 <te>
tree->right = 0x601220 <td>
tree-->right[[2]] = 0x6011e0 <tb>
1 = 1
2 = 2
3 = 3
4 = 4
5 = 5
120 'x' = 120 'x'
121 'y' = 121 'y'
122 'z' = 122 'z'
0 = 0
1 = 1
2 = 2
1 = 1
2 = 2
3 = 3
4 = 4
#/(..15) = 15
1 = 1
2 = 2
3 = 3
4 = 4
5 = 5
(0) + (10) = 10
(0) + (11) = 11
(1) + (10) = 11
(1) + (11) = 12
(2) + (10) = 12
(2) + (11) = 13
arr[0] = 5
arr[1] = 10
arr[0] = 5
arr[1] = 10
arr[2] = 15
arr[3] = 20
#/arr[0..]@0 = 4
1 = 1
2 = 2
1 = 1
2 = 2
3 = 3
2 < 5 = 1
foo > arr[foo] = 0
1 >= 2 = 0
foo == 10 = 0
st.i != 20 = 1
1 ? 2 : 3 = 2
foo ? 2 ? 3 : 4 : 5 = 3
!foo ? foo : 2 ? 3 : 4 = 3
5 >? 4 = 5
6 >? 4 = 6
7 >? 4 = 7
8 >? 4 = 8
9 >? 4 = 9
arr[0] <=? 6 = 5
((4) * (2)) % 3 ==? 2 = 2
((5) * (1)) % 3 ==? 2 = 2
arr[1] !=? 5 = 10
1 >? 0 = 1
(i) + 9 = 14
arr[i] = 5
arr[i] = 10
arr[i] + i = 5
arr[i] + i = 11
arr[i] + 0 = 5
arr[i] + 1 = 11
x = "string"
y = 0x601040 <foo>
*y = 1
z = 1
&z = 0x601040 <foo>
Not addressable
Aliases table:
i: 1 = 1
x: "string" = "string"
y: &foo = 0x601040 <foo>
z: foo = 1
Aliases table cleared
Aliases table empty
1 + 5 = 6
2 + 5 = 7
3 + 5 = 8
arr[0] = 5
arr[1] = 10
1 + 0 = 1
2 + 0 = 2
2 + 1 = 3
3 + 0 = 3
3 + 1 = 4
3 + 2 = 5
1 = 1
2 = 2
3 = 3
#/(1,4,8,16) = 4
arr[0] = 5
arr[1] = 10
1 = 1
2 = 2
3 = 3
2 = 2
3 = 3
4 = 4
3 = 3
4 = 4
5 = 5
st.(i) = 123
st.(r) = 3.1415000000000002
tree->v = 14
tree->(left)->v = 12
tree-->(left)[[2]]->v = 8
tree-->(left)[[3]]->v = 0
tree-->(left)[[2]]->(right)->v = 1
tree->(left)->(right)->v = 9
tree->(left)->(right)->(left)->v = 2
tree->(left)-->(right)[[2]]->v = 3
tree->(right)->v = 13
tree->(right)->(left)->v = 10
tree->(right)-->(left)[[2]]->v = 4
tree->(right)->(left)->(right)->v = 5
tree-->(right)[[2]]->v = 11
tree-->(right)[[2]]->(left)->v = 6
tree-->(right)[[3]]->v = 7
(100) = 100
(101) = 101
(102) = 102
(103) = 103
(104) = 104
(105) = 105
(106) = 106
(107) = 107
(108) = 108
(109) = 109
(110) = 110
tree->(if(v > 10) v else v + 100) = 14
tree->left->(if(v > 10) v else v + 100) = 12
tree-->left[[2]]->(if(v > 10) v else v + 100) = 108
tree-->left[[3]]->(if(v > 10) v else v + 100) = 100
#/(100..)#i@(i > 10) = 11
tree->right->(if(v % 2) v * v) = 169
tree-->right[[2]]->(if(v % 2) v * v) = 121
tree-->right[[3]]->(if(v % 2) v * v) = 49
(100.. => if(&&/(2,3..(_ - 1) => __ % _)) _)[[0]] = 101
(100.. => if(&&/(2,3..(_ - 1) => __ % _)) _)[[1]] = 103
(100.. => if(&&/(2,3..(_ - 1) => __ % _)) _)[[2]] = 107
(100.. => if(&&/(2,3..(_ - 1) => __ % _)) _)[[3]] = 109
(100.. => if(&&/(2,3..(_ - 1) => __ % _)) _)[[4]] = 113
(int)3.5 = 3
(int)3.5 * 10 = 30
Temporary breakpoint 1 at 0x4004ba: file test.c, line 15.

Temporary breakpoint 1, main () at test.c:15
15	  return 0;
strncmp("foo","bar",1) = 4
strncmp("foo","bar",2) = 4
strncmp("foo","bar",3) = 4
